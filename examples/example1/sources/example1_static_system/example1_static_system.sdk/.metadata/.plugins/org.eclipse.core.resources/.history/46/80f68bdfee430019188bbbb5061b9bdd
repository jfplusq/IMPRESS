/*
 * xc7z020.h
 *
 *  Created on: 30/05/2014
 *      Author: Alfonso
 */

#ifndef XC7Z020_H_
#define XC7Z020_H_

#include "series7.h"

#define MAX_ROWS    3 //clock region rows
#define MAX_COLUMNS 74

// BRAM content definitions
#define BRAM_CONTENT   1
#define BRAM_NOCONTENT 0

// Clock region definitions
#define BOTTOM 1
#define TOP    0
#define ROW0   0
#define ROW1   1

// ID generation
#define block(top, row, type)  ((top<<24) | (row<<16) | (type))
#define content(yes_no, major)  ((yes_no<<16) | (major))

// FPGA matrix
const u32 fpga[MAX_ROWS][MAX_COLUMNS] = {
	{
		block(BOTTOM, ROW1, IOB_A),
		block(BOTTOM, ROW1, IOB_B),
		block(BOTTOM, ROW1, CLB),
		block(BOTTOM, ROW1, CLB),
		block(BOTTOM, ROW1, CLB),
		block(BOTTOM, ROW1, CLB),
		block(BOTTOM, ROW1, BRAM),
		block(BOTTOM, ROW1, CLB),
		block(BOTTOM, ROW1, CLB),
		block(BOTTOM, ROW1, DSP),
		block(BOTTOM, ROW1, CLB),
		block(BOTTOM, ROW1, CLB),
		block(BOTTOM, ROW1, CLB),
		block(BOTTOM, ROW1, CLB),
		block(BOTTOM, ROW1, DSP),
		block(BOTTOM, ROW1, CLB),
		block(BOTTOM, ROW1, CLB),
		block(BOTTOM, ROW1, BRAM),
		block(BOTTOM, ROW1, CLB),
		block(BOTTOM, ROW1, CLB),
		block(BOTTOM, ROW1, CLB),
		block(BOTTOM, ROW1, CLB),
		block(BOTTOM, ROW1, BRAM),
		block(BOTTOM, ROW1, CLB),
		block(BOTTOM, ROW1, CLB),
		block(BOTTOM, ROW1, DSP),
		block(BOTTOM, ROW1, CLB),
		block(BOTTOM, ROW1, CLB),
		block(BOTTOM, ROW1, CLB),
		block(BOTTOM, ROW1, CLB),
		block(BOTTOM, ROW1, CLB),
		block(BOTTOM, ROW1, CLB),
		block(BOTTOM, ROW1, CLB),
		block(BOTTOM, ROW1, CLK),
		block(BOTTOM, ROW1, CLB),
		block(BOTTOM, ROW1, CLB),
		block(BOTTOM, ROW1, BRAM),
		block(BOTTOM, ROW1, CLB),
		block(BOTTOM, ROW1, CLB),
		block(BOTTOM, ROW1, CLB),
		block(BOTTOM, ROW1, CLB),
		block(BOTTOM, ROW1, CLB),
		block(BOTTOM, ROW1, CLB),
		block(BOTTOM, ROW1, CLB),
		block(BOTTOM, ROW1, CLB),
		block(BOTTOM, ROW1, CLB),
		block(BOTTOM, ROW1, CLB),
		block(BOTTOM, ROW1, CLB),
		block(BOTTOM, ROW1, CLB),
		block(BOTTOM, ROW1, CLB),
		block(BOTTOM, ROW1, CFG),
		block(BOTTOM, ROW1, CLB),
		block(BOTTOM, ROW1, CLB),
		block(BOTTOM, ROW1, CLB),
		block(BOTTOM, ROW1, CLB),
		block(BOTTOM, ROW1, CLB),
		block(BOTTOM, ROW1, BRAM),
		block(BOTTOM, ROW1, CLB),
		block(BOTTOM, ROW1, CLB),
		block(BOTTOM, ROW1, DSP),
		block(BOTTOM, ROW1, CLB),
		block(BOTTOM, ROW1, CLB),
		block(BOTTOM, ROW1, CLB),
		block(BOTTOM, ROW1, CLB),
		block(BOTTOM, ROW1, DSP),
		block(BOTTOM, ROW1, CLB),
		block(BOTTOM, ROW1, CLB),
		block(BOTTOM, ROW1, BRAM),
		block(BOTTOM, ROW1, CLB),
		block(BOTTOM, ROW1, CLB),
		block(BOTTOM, ROW1, CLB),
		block(BOTTOM, ROW1, CLB),
		block(BOTTOM, ROW1, IOB_B),
		block(BOTTOM, ROW1, IOB_A)
	},
	{
		block(BOTTOM, ROW0, IOB_A),
		block(BOTTOM, ROW0, IOB_B),
		block(BOTTOM, ROW0, CLB),
		block(BOTTOM, ROW0, CLB),
		block(BOTTOM, ROW0, CLB),
		block(BOTTOM, ROW0, CLB),
		block(BOTTOM, ROW0, BRAM),
		block(BOTTOM, ROW0, CLB),
		block(BOTTOM, ROW0, CLB),
		block(BOTTOM, ROW0, DSP),
		block(BOTTOM, ROW0, CLB),
		block(BOTTOM, ROW0, CLB),
		block(BOTTOM, ROW0, CLB),
		block(BOTTOM, ROW0, CLB),
		block(BOTTOM, ROW0, DSP),
		block(BOTTOM, ROW0, CLB),
		block(BOTTOM, ROW0, CLB),
		block(BOTTOM, ROW0, BRAM),
		block(BOTTOM, ROW0, CLB),
		block(BOTTOM, ROW0, CLB),
		block(BOTTOM, ROW0, CLB),
		block(BOTTOM, ROW0, CLB),
		block(BOTTOM, ROW0, BRAM),
		block(BOTTOM, ROW0, CLB),
		block(BOTTOM, ROW0, CLB),
		block(BOTTOM, ROW0, DSP),
		block(BOTTOM, ROW0, CLB),
		block(BOTTOM, ROW0, CLB),
		block(BOTTOM, ROW0, CLB),
		block(BOTTOM, ROW0, CLB),
		block(BOTTOM, ROW0, CLB),
		block(BOTTOM, ROW0, CLB),
		block(BOTTOM, ROW0, CLB),
		block(BOTTOM, ROW0, CLK),
		block(BOTTOM, ROW0, CLB),
		block(BOTTOM, ROW0, CLB),
		block(BOTTOM, ROW0, BRAM),
		block(BOTTOM, ROW0, CLB),
		block(BOTTOM, ROW0, CLB),
		block(BOTTOM, ROW0, CLB),
		block(BOTTOM, ROW0, CLB),
		block(BOTTOM, ROW0, CLB),
		block(BOTTOM, ROW0, CLB),
		block(BOTTOM, ROW0, CLB),
		block(BOTTOM, ROW0, CLB),
		block(BOTTOM, ROW0, CLB),
		block(BOTTOM, ROW0, CLB),
		block(BOTTOM, ROW0, CLB),
		block(BOTTOM, ROW0, CLB),
		block(BOTTOM, ROW0, CLB),
		block(BOTTOM, ROW0, CFG),
		block(BOTTOM, ROW0, CLB),
		block(BOTTOM, ROW0, CLB),
		block(BOTTOM, ROW0, CLB),
		block(BOTTOM, ROW0, CLB),
		block(BOTTOM, ROW0, CLB),
		block(BOTTOM, ROW0, BRAM),
		block(BOTTOM, ROW0, CLB),
		block(BOTTOM, ROW0, CLB),
		block(BOTTOM, ROW0, DSP),
		block(BOTTOM, ROW0, CLB),
		block(BOTTOM, ROW0, CLB),
		block(BOTTOM, ROW0, CLB),
		block(BOTTOM, ROW0, CLB),
		block(BOTTOM, ROW0, DSP),
		block(BOTTOM, ROW0, CLB),
		block(BOTTOM, ROW0, CLB),
		block(BOTTOM, ROW0, BRAM),
		block(BOTTOM, ROW0, CLB),
		block(BOTTOM, ROW0, CLB),
		block(BOTTOM, ROW0, CLB),
		block(BOTTOM, ROW0, CLB),
		block(BOTTOM, ROW0, IOB_B),
		block(BOTTOM, ROW0, IOB_A)
	},
	{
		block(TOP, ROW0, IOB_A),
		block(TOP, ROW0, IOB_B),
		block(TOP, ROW0, CLB),
		block(TOP, ROW0, CLB),
		block(TOP, ROW0, CLB),
		block(TOP, ROW0, CLB),
		block(TOP, ROW0, BRAM),
		block(TOP, ROW0, CLB),
		block(TOP, ROW0, CLB),
		block(TOP, ROW0, DSP),
		block(TOP, ROW0, CLB),
		block(TOP, ROW0, CLB),
		block(TOP, ROW0, CLB),
		block(TOP, ROW0, CLB),
		block(TOP, ROW0, DSP),
		block(TOP, ROW0, CLB),
		block(TOP, ROW0, CLB),
		block(TOP, ROW0, BRAM),
		block(TOP, ROW0, CLB),
		block(TOP, ROW0, CLB),
		block(TOP, ROW0, CLB),
		block(TOP, ROW0, CLB),
		block(TOP, ROW0, BRAM),
		block(TOP, ROW0, CLB),
		block(TOP, ROW0, CLB),
		block(TOP, ROW0, DSP),
		block(TOP, ROW0, CLB),
		block(TOP, ROW0, CLB),
		block(TOP, ROW0, CLB),
		block(TOP, ROW0, CLB),
		block(TOP, ROW0, CLB),
		block(TOP, ROW0, CLB),
		block(TOP, ROW0, CLB),
		block(TOP, ROW0, CLK),
		block(TOP, ROW0, CLB),
		block(TOP, ROW0, CLB),
		block(TOP, ROW0, BRAM),
		block(TOP, ROW0, CLB),
		block(TOP, ROW0, CLB),
		block(TOP, ROW0, CLB),
		block(TOP, ROW0, CLB),
		block(TOP, ROW0, CLB),
		block(TOP, ROW0, CLB),
		block(TOP, ROW0, CLB),
		block(TOP, ROW0, CLB),
		block(TOP, ROW0, CLB),
		block(TOP, ROW0, CLB),
		block(TOP, ROW0, CLB),
		block(TOP, ROW0, CLB),
		block(TOP, ROW0, CLB),
		block(TOP, ROW0, CFG),
		block(TOP, ROW0, CLB),
		block(TOP, ROW0, CLB),
		block(TOP, ROW0, CLB),
		block(TOP, ROW0, CLB),
		block(TOP, ROW0, CLB),
		block(TOP, ROW0, BRAM),
		block(TOP, ROW0, CLB),
		block(TOP, ROW0, CLB),
		block(TOP, ROW0, DSP),
		block(TOP, ROW0, CLB),
		block(TOP, ROW0, CLB),
		block(TOP, ROW0, CLB),
		block(TOP, ROW0, CLB),
		block(TOP, ROW0, DSP),
		block(TOP, ROW0, CLB),
		block(TOP, ROW0, CLB),
		block(TOP, ROW0, BRAM),
		block(TOP, ROW0, CLB),
		block(TOP, ROW0, CLB),
		block(TOP, ROW0, CLB),
		block(TOP, ROW0, CLB),
		block(TOP, ROW0, IOB_B),
		block(TOP, ROW0, IOB_A)
	}
};

// FPGA bram matrix
const u32 fpga_bram[MAX_ROWS][MAX_COLUMNS] = {
	{
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_CONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_CONTENT, 1),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_CONTENT, 2),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_CONTENT, 3),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_CONTENT, 4),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_CONTENT, 5),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0)
	},
	{
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_CONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_CONTENT, 1),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_CONTENT, 2),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_CONTENT, 3),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_CONTENT, 4),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_CONTENT, 5),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0)
	},
	{
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_CONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_CONTENT, 1),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_CONTENT, 2),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_CONTENT, 3),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_CONTENT, 4),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_CONTENT, 5),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0),
		content(BRAM_NOCONTENT, 0)
	}
};

#endif /* XC7Z020_H_ */
